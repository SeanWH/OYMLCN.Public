using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using OYMLCN.WeChat;
using OYMLCN.WeChat.Model;
using OYMLCN.WeChat.Enum;

namespace OYMLCN.WeChat.Test
{
    [TestClass]
    public class UnitTest
    {
        [TestMethod]
        public void WeChatRequestTest()
        {
            var wechatXml = new WeChatRequsetXmlDocument();

            string textMsg = @"<xml>
 <ToUserName><![CDATA[toUser]]></ToUserName>
 <FromUserName><![CDATA[fromUser]]></FromUserName>
 <CreateTime>1348831860</CreateTime>
 <MsgType><![CDATA[text]]></MsgType>
 <Content><![CDATA[this is a test]]></Content>
 <MsgId>1234567890123456</MsgId>
 </xml>";
            wechatXml.Document = textMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Text);
            var textRequest = wechatXml.ToRequestMessageText();
            Assert.AreEqual(textRequest.ToUserName, "toUser");
            Assert.AreEqual(textRequest.FromUserName, "fromUser");
            Assert.AreEqual(textRequest.CreateTime, 1348831860);
            Assert.AreEqual(textRequest.Content, "this is a test");
            Assert.AreEqual(textRequest.MsgId, 1234567890123456);

            string imgMsg = @"<xml>
 <ToUserName><![CDATA[toUser]]></ToUserName>
 <FromUserName><![CDATA[fromUser]]></FromUserName>
 <CreateTime>1348831860</CreateTime>
 <MsgType><![CDATA[image]]></MsgType>
 <PicUrl><![CDATA[this is a url]]></PicUrl>
 <MediaId><![CDATA[media_id]]></MediaId>
 <MsgId>1234567890123456</MsgId>
 </xml>";
            wechatXml.Document = imgMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Image);
            var imgRequest = wechatXml.ToRequestMessageImage();
            Assert.AreEqual(imgRequest.ToUserName, "toUser");
            Assert.AreEqual(imgRequest.FromUserName, "fromUser");
            Assert.AreEqual(imgRequest.CreateTime, 1348831860);
            Assert.AreEqual(imgRequest.PicUrl, "this is a url");
            Assert.AreEqual(imgRequest.MediaId, "media_id");
            Assert.AreEqual(imgRequest.MsgId, 1234567890123456);

            string voiceMsg = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>1357290913</CreateTime>
<MsgType><![CDATA[voice]]></MsgType>
<MediaId><![CDATA[media_id]]></MediaId>
<Format><![CDATA[Format]]></Format>
<MsgId>1234567890123456</MsgId>
</xml>";
            wechatXml.Document = voiceMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Voice);
            var voiceRequest = wechatXml.ToRequestMessageVoice();
            Assert.AreEqual(voiceRequest.ToUserName, "toUser");
            Assert.AreEqual(voiceRequest.FromUserName, "fromUser");
            Assert.AreEqual(voiceRequest.CreateTime, 1357290913);
            Assert.AreEqual(voiceRequest.MediaId, "media_id");
            Assert.AreEqual(voiceRequest.Format, "Format");
            Assert.AreEqual(voiceRequest.MsgId, 1234567890123456);

            voiceMsg = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>1357290913</CreateTime>
<MsgType><![CDATA[voice]]></MsgType>
<MediaId><![CDATA[media_id]]></MediaId>
<Format><![CDATA[Format]]></Format>
<Recognition><![CDATA[腾讯微信团队]]></Recognition>
<MsgId>1234567890123456</MsgId>
</xml>";
            wechatXml.Document = voiceMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Voice);
            voiceRequest = wechatXml.ToRequestMessageVoice();
            Assert.AreEqual(voiceRequest.ToUserName, "toUser");
            Assert.AreEqual(voiceRequest.FromUserName, "fromUser");
            Assert.AreEqual(voiceRequest.CreateTime, 1357290913);
            Assert.AreEqual(voiceRequest.MediaId, "media_id");
            Assert.AreEqual(voiceRequest.Format, "Format");
            Assert.AreEqual(voiceRequest.Recognition, "腾讯微信团队");
            Assert.AreEqual(voiceRequest.MsgId, 1234567890123456);

            var videoMsg = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>1357290913</CreateTime>
<MsgType><![CDATA[video]]></MsgType>
<MediaId><![CDATA[media_id]]></MediaId>
<ThumbMediaId><![CDATA[thumb_media_id]]></ThumbMediaId>
<MsgId>1234567890123456</MsgId>
</xml>";
            wechatXml.Document = videoMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Video);
            var videoRequest = wechatXml.ToRequestMessageVideo();
            Assert.AreEqual(videoRequest.ToUserName, "toUser");
            Assert.AreEqual(videoRequest.FromUserName, "fromUser");
            Assert.AreEqual(videoRequest.CreateTime, 1357290913);
            Assert.AreEqual(videoRequest.MediaId, "media_id");
            Assert.AreEqual(videoRequest.ThumbMediaId, "thumb_media_id");
            Assert.AreEqual(videoRequest.MsgId, 1234567890123456);

            videoMsg = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>1357290913</CreateTime>
<MsgType><![CDATA[shortvideo]]></MsgType>
<MediaId><![CDATA[media_id]]></MediaId>
<ThumbMediaId><![CDATA[thumb_media_id]]></ThumbMediaId>
<MsgId>1234567890123456</MsgId>
</xml>";
            wechatXml.Document = videoMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.ShortVideo);
            videoRequest = wechatXml.ToRequestMessageShortVideo();
            Assert.AreEqual(videoRequest.ToUserName, "toUser");
            Assert.AreEqual(videoRequest.FromUserName, "fromUser");
            Assert.AreEqual(videoRequest.CreateTime, 1357290913);
            Assert.AreEqual(videoRequest.MediaId, "media_id");
            Assert.AreEqual(videoRequest.ThumbMediaId, "thumb_media_id");
            Assert.AreEqual(videoRequest.MsgId, 1234567890123456);

            var locationMsg = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>1351776360</CreateTime>
<MsgType><![CDATA[location]]></MsgType>
<Location_X>23.134521</Location_X>
<Location_Y>113.358803</Location_Y>
<Scale>20</Scale>
<Label><![CDATA[位置信息]]></Label>
<MsgId>1234567890123456</MsgId>
</xml>";
            wechatXml.Document = locationMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Location);
            var locationRequest = wechatXml.ToRequestMessageLocation();
            Assert.AreEqual(locationRequest.ToUserName, "toUser");
            Assert.AreEqual(locationRequest.FromUserName, "fromUser");
            Assert.AreEqual(locationRequest.CreateTime, 1351776360);
            Assert.AreEqual(locationRequest.Location_X, 23.134521);
            Assert.AreEqual(locationRequest.Location_Y, 113.358803);
            Assert.AreEqual(locationRequest.Scale, 20);
            Assert.AreEqual(locationRequest.Label, "位置信息");
            Assert.AreEqual(locationRequest.MsgId, 1234567890123456);

            var linkMsg = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>1351776360</CreateTime>
<MsgType><![CDATA[link]]></MsgType>
<Title><![CDATA[公众平台官网链接]]></Title>
<Description><![CDATA[公众平台官网链接]]></Description>
<Url><![CDATA[url]]></Url>
<MsgId>1234567890123456</MsgId>
</xml>";
            wechatXml.Document = linkMsg.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Link);
            var linkRequest = wechatXml.ToRequestMessageLink();
            Assert.AreEqual(linkRequest.ToUserName, "toUser");
            Assert.AreEqual(linkRequest.FromUserName, "fromUser");
            Assert.AreEqual(linkRequest.CreateTime, 1351776360);
            Assert.AreEqual(linkRequest.Title, "公众平台官网链接");
            Assert.AreEqual(linkRequest.Description, "公众平台官网链接");
            Assert.AreEqual(linkRequest.Url, "url");
            Assert.AreEqual(linkRequest.MsgId, 1234567890123456);

        }

        [TestMethod]
        public void WeChatRequestEventTest()
        {
            var wechatXml = new WeChatRequsetXmlDocument();

            var subscribeEvent = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[FromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[subscribe]]></Event>
</xml>";
            wechatXml.Document = subscribeEvent.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Event);
            Assert.AreEqual(wechatXml.GetEventType(), RequestEventType.关注);
            var eventRequest = wechatXml.ToEventMessage();
            Assert.AreEqual(eventRequest.ToUserName, "toUser");
            Assert.AreEqual(eventRequest.FromUserName, "FromUser");
            Assert.AreEqual(eventRequest.CreateTime, 123456789);

            subscribeEvent = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[FromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[subscribe]]></Event>
<EventKey><![CDATA[qrscene_123123]]></EventKey>
<Ticket><![CDATA[TICKET]]></Ticket>
</xml>";
            wechatXml.Document = subscribeEvent.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Event);
            Assert.AreEqual(wechatXml.GetEventType(), RequestEventType.关注);
            eventRequest = wechatXml.ToEventMessage();
            Assert.AreEqual(eventRequest.ToUserName, "toUser");
            Assert.AreEqual(eventRequest.FromUserName, "FromUser");
            Assert.AreEqual(eventRequest.CreateTime, 123456789);
            var sceneEventRequest = wechatXml.ToEventMessage扫描带参数二维码();
            Assert.AreEqual(sceneEventRequest.ToUserName, "toUser");
            Assert.AreEqual(sceneEventRequest.FromUserName, "FromUser");
            Assert.AreEqual(sceneEventRequest.CreateTime, 123456789);
            Assert.AreEqual(sceneEventRequest.EventKey, "qrscene_123123");
            Assert.AreEqual(sceneEventRequest.Ticket, "TICKET");

            subscribeEvent = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[FromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[SCAN]]></Event>
<EventKey><![CDATA[SCENE_VALUE]]></EventKey>
<Ticket><![CDATA[TICKET]]></Ticket>
</xml>";
            wechatXml.Document = subscribeEvent.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Event);
            Assert.AreEqual(wechatXml.GetEventType(), RequestEventType.扫描带参数二维码);
            sceneEventRequest = wechatXml.ToEventMessage扫描带参数二维码();
            Assert.AreEqual(sceneEventRequest.ToUserName, "toUser");
            Assert.AreEqual(sceneEventRequest.FromUserName, "FromUser");
            Assert.AreEqual(sceneEventRequest.CreateTime, 123456789);
            Assert.AreEqual(sceneEventRequest.EventKey, "SCENE_VALUE");
            Assert.AreEqual(sceneEventRequest.Ticket, "TICKET");

            var locationEvent = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[LOCATION]]></Event>
<Latitude>23.137466</Latitude>
<Longitude>113.352425</Longitude>
<Precision>119.385040</Precision>
</xml>";
            wechatXml.Document = locationEvent.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Event);
            Assert.AreEqual(wechatXml.GetEventType(), RequestEventType.上报地理位置);
            var locationRequest = wechatXml.ToEventMessage上报地理位置();
            Assert.AreEqual(locationRequest.ToUserName, "toUser");
            Assert.AreEqual(locationRequest.FromUserName, "fromUser");
            Assert.AreEqual(locationRequest.CreateTime, 123456789);
            Assert.AreEqual(locationRequest.Latitude, 23.137466);
            Assert.AreEqual(locationRequest.Longitude, 113.352425);
            Assert.AreEqual(locationRequest.Precision, 119.385040);

            var clickEvent = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[FromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[CLICK]]></Event>
<EventKey><![CDATA[EVENTKEY]]></EventKey>
</xml>";
            wechatXml.Document = clickEvent.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Event);
            Assert.AreEqual(wechatXml.GetEventType(), RequestEventType.点击自定义菜单);
            var clickRequest = wechatXml.ToEventMessage点击自定义菜单();
            Assert.AreEqual(clickRequest.ToUserName, "toUser");
            Assert.AreEqual(clickRequest.FromUserName, "FromUser");
            Assert.AreEqual(clickRequest.CreateTime, 123456789);
            Assert.AreEqual(clickRequest.EventKey, "EVENTKEY");

            var linkEvent = @"<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[FromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[VIEW]]></Event>
<EventKey><![CDATA[www.qq.com]]></EventKey>
<MenuId>123</MenuId>
</xml>";
            wechatXml.Document = linkEvent.XmlToXDocument();
            Assert.AreEqual(wechatXml.GetMsgType(), RequestMsgType.Event);
            Assert.AreEqual(wechatXml.GetEventType(), RequestEventType.点击菜单跳转链接);
            var linkRequest = wechatXml.ToEventMessage点击菜单跳转链接();
            Assert.AreEqual(linkRequest.ToUserName, "toUser");
            Assert.AreEqual(linkRequest.FromUserName, "FromUser");
            Assert.AreEqual(linkRequest.CreateTime, 123456789);
            Assert.AreEqual(linkRequest.EventKey, "www.qq.com");
            Assert.AreEqual(linkRequest.MenuId, 123);

        }

        [TestMethod]
        public void WeChatResponseTest()
        {
            var wechatXml = new WeChatRequsetXmlDocument();
            var demoMsg = @"<xml>
<ToUserName><![CDATA[AppId]]></ToUserName>
<FromUserName><![CDATA[OpenId]]></FromUserName>
<CreateTime>12345678</CreateTime>
</xml>";
            wechatXml.Document = demoMsg.XmlToXDocument();
            var demoText = wechatXml.ToRequestMessageText();
            Assert.AreEqual(demoText.ResponseText("你好").Source, @"<xml>
<ToUserName><![CDATA[OpenId]]></ToUserName>
<FromUserName><![CDATA[AppId]]></FromUserName>
<CreateTime>12345678</CreateTime>
<MsgType><![CDATA[text]]></MsgType>
<Content><![CDATA[你好]]></Content>
</xml>".RemoveBr());
            Assert.AreEqual(demoText.ResponseImage("media_id").Source, @"<xml>
<ToUserName><![CDATA[OpenId]]></ToUserName>
<FromUserName><![CDATA[AppId]]></FromUserName>
<CreateTime>12345678</CreateTime>
<MsgType><![CDATA[image]]></MsgType>
<Image>
<MediaId><![CDATA[media_id]]></MediaId>
</Image>
</xml>".RemoveBr());
            Assert.AreEqual(demoText.ResponseVoice("media_id").Source, @"<xml>
<ToUserName><![CDATA[OpenId]]></ToUserName>
<FromUserName><![CDATA[AppId]]></FromUserName>
<CreateTime>12345678</CreateTime>
<MsgType><![CDATA[voice]]></MsgType>
<Voice>
<MediaId><![CDATA[media_id]]></MediaId>
</Voice>
</xml>".RemoveBr());
            Assert.AreEqual(demoText.ResponseVideo("media_id", "title", "description").Source, @"<xml>
<ToUserName><![CDATA[OpenId]]></ToUserName>
<FromUserName><![CDATA[AppId]]></FromUserName>
<CreateTime>12345678</CreateTime>
<MsgType><![CDATA[video]]></MsgType>
<Video>
<MediaId><![CDATA[media_id]]></MediaId>
<Title><![CDATA[title]]></Title>
<Description><![CDATA[description]]></Description>
</Video>
</xml>".RemoveBr());
            Assert.AreEqual(demoText.ResponseMusic("media_id", "MUSIC_Url", "TITLE", "DESCRIPTION", "HQ_MUSIC_Url").Source, @"<xml>
<ToUserName><![CDATA[OpenId]]></ToUserName>
<FromUserName><![CDATA[AppId]]></FromUserName>
<CreateTime>12345678</CreateTime>
<MsgType><![CDATA[music]]></MsgType>
<Music>
<Title><![CDATA[TITLE]]></Title>
<Description><![CDATA[DESCRIPTION]]></Description>
<MusicUrl><![CDATA[MUSIC_Url]]></MusicUrl>
<HQMusicUrl><![CDATA[HQ_MUSIC_Url]]></HQMusicUrl>
<ThumbMediaId><![CDATA[media_id]]></ThumbMediaId>
</Music>
</xml>".RemoveBr());

            Assert.AreEqual(demoText.ResponseNews(
                new WeChatResponseNewItem("title1", "description1", "picurl", "url"),
                new WeChatResponseNewItem("title", "description", "picurl", "url")
                ).Source, @"<xml>
<ToUserName><![CDATA[OpenId]]></ToUserName>
<FromUserName><![CDATA[AppId]]></FromUserName>
<CreateTime>12345678</CreateTime>
<MsgType><![CDATA[news]]></MsgType>
<ArticleCount>2</ArticleCount>
<Articles>
<item>
<Title><![CDATA[title1]]></Title>
<Description><![CDATA[description1]]></Description>
<PicUrl><![CDATA[picurl]]></PicUrl>
<Url><![CDATA[url]]></Url>
</item>
<item>
<Title><![CDATA[title]]></Title>
<Description><![CDATA[description]]></Description>
<PicUrl><![CDATA[picurl]]></PicUrl>
<Url><![CDATA[url]]></Url>
</item>
</Articles>
</xml>".RemoveBr());

        }


        [TestMethod]
        public void CustomerServiceApiTest()
        {
            Assert.AreEqual(CustomerServiceApi.TextJson("OPENID", "Hello World"), "{\"touser\":\"OPENID\",\"msgtype\":\"text\",\"text\":{\"content\":\"Hello World\"}}");
            Assert.AreEqual(CustomerServiceApi.ImageJson("OPENID", "MEDIA_ID"), "{\"touser\":\"OPENID\",\"msgtype\":\"image\",\"image\":{\"media_id\":\"MEDIA_ID\"}}");
            Assert.AreEqual(CustomerServiceApi.VoiceJson("OPENID", "MEDIA_ID"), "{\"touser\":\"OPENID\",\"msgtype\":\"voice\",\"voice\":{\"media_id\":\"MEDIA_ID\"}}");
            Assert.AreEqual(CustomerServiceApi.VideoJson("OPENID", "MEDIA_ID", "MEDIA_ID", "TITLE", "DESCRIPTION"), "{\"touser\":\"OPENID\",\"msgtype\":\"video\",\"video\":{\"media_id\":\"MEDIA_ID\",\"thumb_media_id\":\"MEDIA_ID\",\"title\":\"TITLE\",\"description\":\"DESCRIPTION\"}}");
            Assert.AreEqual(CustomerServiceApi.MusicJson("OPENID", "THUMB_MEDIA_ID", "MUSIC_URL", "HQ_MUSIC_URL", "MUSIC_TITLE", "MUSIC_DESCRIPTION"), "{\"touser\":\"OPENID\",\"msgtype\":\"music\",\"music\":{\"title\":\"MUSIC_TITLE\",\"description\":\"MUSIC_DESCRIPTION\",\"musicurl\":\"MUSIC_URL\",\"hqmusicurl\":\"HQ_MUSIC_URL\",\"thumb_media_id\":\"THUMB_MEDIA_ID\"}}");
            Assert.AreEqual(CustomerServiceApi.NewsJson("OPENID", new List<WeChatResponseNewItem>() {
                new WeChatResponseNewItem("HappyDay","IsReallyAHappyDay","PIC_URL","URL"),
                new WeChatResponseNewItem("HappyDay","IsReallyAHappyDay","PIC_URL","URL")
            }), "{\"touser\":\"OPENID\",\"msgtype\":\"news\",\"news\":{\"articles\":[{\"title\":\"HappyDay\",\"description\":\"IsReallyAHappyDay\",\"url\":\"URL\",\"picurl\":\"PIC_URL\"},{\"title\":\"HappyDay\",\"description\":\"IsReallyAHappyDay\",\"url\":\"URL\",\"picurl\":\"PIC_URL\"}]}}");
            Assert.AreEqual(CustomerServiceApi.MpNewsJson("OPENID", "MEDIA_ID"), "{\"touser\":\"OPENID\",\"msgtype\":\"mpnews\",\"mpnews\":{\"media_id\":\"MEDIA_ID\"}}");
            Assert.AreEqual(CustomerServiceApi.CardJson("OPENID", "123dsdajkasd231jhksad"), "{\"touser\":\"OPENID\",\"msgtype\":\"wxcard\",\"wxcard\":{\"card_id\":\"123dsdajkasd231jhksad\"}}");
            //Assert.AreEqual(CustomerServiceApi.SendAs(new AccessToken()
            //{
            //    Config = new Config() { Name = "kftest" }
            //}, CustomerServiceApi.TextJson("OPENID", "HelloWorld"), "test1"), "{\"touser\":\"OPENID\",\"msgtype\":\"text\",\"text\":{\"content\":\"HelloWorld\"},\"customservice\":{\"kf_account\":\"test1@kftest\"}}");


        }


        public void MediaApiTest()
        {
            Assert.AreEqual(MediaApi.MaterialNewsJson(new List<MediaNewItem>() {
                new MediaNewItem(){
                    title="TITLE",
                    thumb_media_id = "THUMB_MEDIA_ID",
                    author="AUTHOR",
                    digest="DIGEST",
                    show_cover_pic = false,
                    content = "CONTENT",
                    content_source_url = "CONTENT_SOURCE_URL"
                }
            }), "{\"articles\":[{\"title\":\"TITLE\",\"thumb_media_id\":\"THUMB_MEDIA_ID\",\"author\":\"AUTHO\"R,\"digest\":\"DIGEST\",\"show_cover_pic\":0,\"content\":\"CONTENT\",\"content_source_url\":\"CONTENT_SOURCE_URL\"}]}");

        }


    }
}
